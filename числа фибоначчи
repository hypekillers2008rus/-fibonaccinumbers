#include <iostream>
#include <vector>
#include <algorithm>

std::vector<int> addBigNumbers(const std::vector<int>& a, const std::vector<int>& b) {
    std::vector<int> result;
    int carry = 0;

    size_t maxSize = std::max(a.size(), b.size());
    for (size_t i = 0; i < maxSize || carry; ++i) {
        int sum = carry;
        if (i < a.size()) sum += a[i];
        if (i < b.size()) sum += b[i];
        result.push_back(sum % 10);
        carry = sum / 10;
    }

    return result;
}

void printBigNumber(const std::vector<int>& number) {
    for (auto it = number.rbegin(); it != number.rend(); ++it) {
        std::cout << *it;
    }
    std::cout << std::endl;
}

int main() {
    int n;
    std::vector<int> first = {0}, second = {1}, next;

    std::cout << "n= ";
    std::cin >> n;

    std::cout << "Fibonacci Series: \n";
    if (n >= 1) printBigNumber(first);
    if (n >= 2) printBigNumber(second);

    for (int i = 2; i < n; i++) {
        next = addBigNumbers(first, second);
        printBigNumber(next);
        first = second;
        second = next;
    }

    return 0;
}
